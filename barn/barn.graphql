type Query {
  getBarns(input: GetBarnsInput): BarnsResult! ## Contains Barns w/ SUCCESS
}

type Mutation {
  createBarn(input: CreateBarnInput): BarnResult! ## Contains Barn w/ SUCCESS
  deleteBarn(input: DeleteBarnInput): BarnResult! ## Contains NULL Barn w/ SUCCESS to indicate delete
}

type Barn {
  barnId: ID!
  barnRole: BarnRole!
  barnProfileSummary: BarnProfileSummary!
  barnFamilySummary: BarnFamilySummary
}

input GetBarnsInput {
  actingId: ID!
  barnStatues: [BarnStatus]
  startKey: String
}

type BarnsResult {
  result: MsResult!
  barns: [Barn]
  lastKey: String
  error: BarnError
}

input CreateBarnInput {
  barnOwnerId: ID!
  barnDisplayName: String!
  barnType: BarnType!
  barnAddressInput: UpsertMsAddressInput!
}

input DeleteBarnInput {
  actingId: ID!
  barnId: ID!
}

type BarnResult {
  result: MsResult!
  barn: Barn
  error: BarnError
}

enum BarnError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  EXCEEDED_BARN_LIMIT
  EXCEEDED_DISPLAY_NAME_LENGTH
  INVALID_ADDRESS
  PROHIBITED_DISPLAY_NAME_CONTENT
  SERVICE
}

enum BarnRole {
  OWNER
  MANAGER
  STAFF
  PRO
  BOARDER
  MEMBER
  GUEST
  HORSE
}
