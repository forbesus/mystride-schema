## Queries
type Query {
  ## BarnSummaries
  getBarnSummaries(input: GetBarnSummariesInput): [BarnSummary]!

  ## BarnProfile
  getBarnProfile(input: GetBarnProfileInput): BarnProfile!

  ## BarnBoard
  getBarnBoardSummaries(input: GetBarnBoardSummariesInput): [BarnBoardSummary]!
  getBarnBoard(input: GetBarnBoardInput): BarnBoard!

  ## BarnFamily
  getBarnFamilySummaries(
    input: GetBarnFamilySummariesInput
  ): [BarnFamilySummary]!
  getBarnFamily(input: GetBarnFamilyInput): BarnFamily!

  ## BarnPlan
  getBarnPlanSummaries(input: GetBarnPlanSummariesInput): [BarnPlanSummary]!
  getBarnPlan(input: GetBarnPlanInput): BarnPlan!

  ## BarnAnnouncements
  getBarnAnnouncements(input: GetBarnAnnouncementsInput): BarnAnnouncements

  ## BarnActivities
  getBarnActivities(input: GetBarnActivitiesInput): BarnActivities

  ## BarnNotes
  getBarnNotes(input: GetBarnNotesInput): BarnNotes

  ## BarnFacility
  getBarnFacilitySummaries(
    input: GetBarnFacilitySummariesInput
  ): [BarnFacilitySummary]!
  getBarnFacility(input: GetBarnFacilityInput): BarnFacility!
}






## Mutations
type Mutation {
  ## Barn
  createBarn(input: CreateBarnInput): BarnSummary!

  ## BarnProfile
  updateBarnProfile(input: UpdateBarnProfileInput): BarnProfile!

  ## BarnBoard
  createBarnBoard(input: CreateBarnBoardInput): ID!
  updateBarnBoard(input: UpdateBarnBoardInput): ID!

  ## BarnPlan
  createBarnPlan(input: CreateBarnPlanInput): ID!
  updateBarnPlan(input: UpdateBarnPlanInput): ID!

  ## BarnFamily
  createBarnFamily(input: CreateBarnFamilyInput): UpsertBarnFamilyResult!
  updateBarnFamily(input: UpdateBarnFamilyInput): UpsertBarnFamilyResult!
  acceptBarnFamilyQrCode(input: AcceptBarnFamilyQrCodeInput): UpsertBarnFamilyResult!

  ## BarnAnnouncement
  createBarnAnnouncement(input: CreateBarnAnnouncementInput): BarnAnnouncement!
  updateBarnAnnouncement(input: UpdateBarnAnnouncementInput): BarnAnnouncement!

  ## BarnActivity
  createBarnActivity(input: CreateBarnActivityInput): BarnActivity!
  updateBarnActivity(input: UpdateBarnActivityInput): BarnActivity!

  ## BarnNote
  createBarnNote(input: CreateBarnNoteInput): BarnNote!
  updateBarnNote(input: UpdateBarnNoteInput): BarnNote!

  ## BarnFacility
  createBarnFacility(input: CreateBarnFacilityInput): ID!
  updateBarnFacility(input: UpdateBarnFacilityInput): ID!
}

## Subscriptions
type Subscription {
  ## BarnProfile
  subscribeBarnProfileByBarnId(barnId: ID!): BarnProfile
    @aws_subscribe(mutations: ["updateBarnProfile"])

  ## BarnBoard
  subscribeBarnBoardByBarnId(barnId: ID!): ID
    @aws_subscribe(mutations: ["createBarnBoard", "updateBarnBoard"])

  subscribeBarnBoardByHorseId(horseId: ID!): ID
    @aws_subscribe(mutations: ["createBarnBoard", "updateBarnBoard"])

  ## BarnFamily
  subscribeBarnFamilyByBarnId(barnId: ID!): UpsertBarnFamilyResult
    @aws_subscribe(mutations: ["createBarnFamily", "updateBarnFamily"])

  subscribeBarnFamilyByFamilyId(barnFamilyId: ID!): UpsertBarnFamilyResult
    @aws_subscribe(mutations: ["createBarnFamily", "updateBarnFamily"])

  ## BarnAnnouncements
  subscribeBarnAnnouncementsByBarnId(barnId: ID!): BarnAnnouncement
    @aws_subscribe(mutations: ["createBarnAnnouncement", "updateBarnAnnouncement"])

  ## BarnActivities
  subscribeBarnActivitiesByBarnId(barnId: ID!): BarnActivity
    @aws_subscribe(mutations: ["createBarnActivity", "updateBarnActivity"])

  ## BarnNotes
  subscribeBarnNotesBySubjectId(subjectId: ID!): BarnNote
    @aws_subscribe(mutations: ["createBarnNote", "updateBarnNote"])

  ## BarnFacilities
  subscribeBarnFacilitiesByBarnId(barnId: ID!): ID
    @aws_subscribe(mutations: ["createBarnFacility", "updateBarnFacility"])
}

## Barn
input CreateBarnInput {
  barnOwnerId: ID!
  barnDisplayName: String!
  barnType: BarnType!
  barnAddressInput: UpsertMsAddressInput!
}

enum CreateBarnError {
  NOT_AUTHORIZED
  EXCEEDED_NAME_LENGTH
  EXCEEDED_BARN_LIMIT
  SERVICE
}

type BarnSummary {
  barnId: ID!
  barnRole: BarnRole!
  barnFamilySummary: BarnFamilySummary
  barnProfileSummary: BarnProfileSummary!
}

input GetBarnSummariesInput {
  associatedId: ID!
}

enum GetBarnSummariesError {
  NOT_AUTHORIZED
  NONEXISTENT_ASSOCIATED_ID
  SERVICE
}

enum BarnRole {
  OWNER
  MANAGER
  STAFF
  PRO
  BOARDER
  MEMBER
  GUEST
  HORSE
}

## BarnProfile
type BarnProfile {
  barnId: ID!
  barnOwner: UserProfilePublic!
  barnPhoneId: ID
  barnEmailId: ID
  barnType: BarnType!
  barnGeohash: String!
  barnStatus: BarnStatus!
  barnDisplayName: String!
  barnCreatedOn: AWSDateTime!
  barnCreatedBy: UserProfilePublic!
  barnModifiedOn: AWSDateTime
  barnModifiedBy: UserProfilePublic
  barnSuspendedOn: AWSDateTime
  barnSuspendedBy: UserProfilePublic
  barnDeactivatedOn: AWSDateTime
  barnDeactivatedBy: UserProfilePublic
  barnDeactivationReason: BarnDeactivationReason
  barnDeactivationComment: String
  barnTimezone: MsTimezone!
  barnAvatarId: ID!
  barnAddress: MsAddress!
  barnLegalName: String
  barnWelcomeMessage: String
  barnBio: String
}

input GetBarnProfileInput {
  barnId: ID!
  associatedId: ID!
}

enum GetBarnProfileError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

input UpdateBarnProfileInput {
  barnId: ID!
  barnAvatarId: ID
  barnDisplayName: String
  barnPhoneId: String
  barnEmailId: String
  barnLegalName: String
  barnTimezone: MsTimezone
  barnWelcomeMessage: String
  barnAddress: UpsertMsAddressInput
}

enum UpdateBarnProfileError {
  NOT_AUTHORIZED
  NOT_FOUND
  INVALID_PHONE_FORMAT
  INVALID_EMAIL_FORMAT
  INVALID_AVATAR_ID
  INVALID_ADDRESS
  EXCEEDED_DISPLAY_NAME_LENGTH
  EXCEEDED_LEGAL_NAME_LENGTH
  EXCEEDED_WELCOME_MESSAGE_LENGTH
  EXCEEDED_BIO_LENGTH
  SERVICE
}

## BarnProfileSummary
type BarnProfileSummary {
  barnId: ID!
  barnOwner: UserProfilePublic!
  barnType: BarnType!
  barnStatus: BarnStatus!
  barnDisplayName: String!
  barnTimezone: MsTimezone!
  barnAvatarId: ID!
  barnCity: String
  barnState: String
  barnCountry: String
  barnCountryCode: MsCountryCode
}

input GetBarnProfileSummaryInput {
  barnId: ID!
  associatedId: ID!
}

enum GetBarnProfileSummaryError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

type BarnProfilePublic {
  barnId: ID!
  barnType: BarnType!
  barnDisplayName: String!
  barnAvatarId: ID!
  barnCity: String
  barnState: String
  barnCountry: String
  barnCountryCode: String
}

enum BarnType {
  COMMERCIAL
  PERSONAL
}

enum BarnStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum BarnDeactivationReason {
  OWNER
  INACTIVITY
  VIOLATION
}

## BarnBoard
type BarnBoard {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus!
  barnBoardHorse: HorseProfilePublic!
  barnBoardBarn: BarnProfilePublic!
  barnBoardFacilitySummary: BarnFacilitySummary
  barnBoardPlan: BarnPlan
  barnBoardInitiatedBy: UserProfilePublic
  barnBoardInitiatedOn: AWSDateTime!
  barnBoardModifiedBy: UserProfilePublic
  barnBoardModifiedOn: AWSDateTime
  barnBoardAcceptedBy: UserProfilePublic
  barnBoardAcceptedOn: AWSDateTime
  barnBoardDeclinedBy: UserProfilePublic
  barnBoardDeclinedOn: AWSDateTime
  barnBoardWhitelistedBy: UserProfilePublic
  barnBoardWaitlistedOn: AWSDateTime
  barnBoardSuspendedBy: UserProfilePublic
  barnBoardSuspendedOn: AWSDateTime
  barnBoardDeactivatedBy: UserProfilePublic
  barnBoardDeactivatedOn: AWSDateTime
  barnBoardAutoDeactivateSetBy: UserProfilePublic
  barnBoardAutoDeactivateOn: AWSDateTime
  barnBoardComment: String
}

type BarnBoardSummary {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus!
  barnBoardHorseSummary: HorseProfilePublic!
  barnBoardBarnSummary: BarnProfilePublic!
  barnBoardFacilitySummary: BarnFacilitySummary
}

input GetBarnBoardSummariesInput {
  barnId: ID!
  associatedId: ID!
}

input GetBarnBoardInput {
  barnId: ID!
  horseId: ID!
  associatedId: ID!
}

input CreateBarnBoardInput {
  barnId: ID!
  horseId: ID!
  barnBoardRequestedPlanId: ID
}

enum CreateBarnBoardError {
  NOT_AUTHORIZED
  EXISTING_BOARD
  EXCEEDED_BARN_BOARD_LIMIT
  NONEXISTENT_BARN_ID
  NONEXISTENT_HORSE_ID
  SERVICE
}

input UpdateBarnBoardInput {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus
  barnBoardFacilityId: ID
  barnBoardPlanId: ID
}

enum UpdateBarnBoardError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

enum BarnBoardType {
  STALL
  PASTURE
}

enum BarnBoardStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  REQUESTED
  WAITLISTED
  DECLINED
}


## BarnPlan
type BarnPlan {
  barnPlanId: ID!
  barnPlanType: BarnPlanType!
  barnPlanStatus: BarnPlanStatus!
  barnPlanCreatedOn: AWSDateTime!
  barnPlanCreatedBy: UserProfilePublic!
  barnPlanModifiedOn: AWSDateTime
  barnPlanModifiedBy: UserProfilePublic
  barnPlanName: String
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanHayType: ForageType
  barnPlanHayPeriods: [HorseActivityPeriod]
  barnPlanHaySupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [HorseActivityPeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [HorseActivityPeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [HorseActivityPeriod]
  barnPlanTurnoutDuration: [Int]
  barnPlanBlanketing: Boolean
}

type BarnPlanSummary {
  barnPlanId: ID!
  barnPlanType: BarnPlanType!
  barnPlanStatus: BarnPlanStatus!
  barnPlanName: String
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
}

input GetBarnPlanSummariesInput {
  barnId: ID!
  associatedId: ID!
}

input GetBarnPlanInput {
  barnPlanId: ID!
  associatedId: ID!
}

enum GetBarnPlanError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

input CreateBarnPlanInput {
  barnPlanName: String
  barnPlanType: BarnPlanType!
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanForageType: ForageType
  barnPlanHForagePeriods: [HorseActivityPeriod]
  barnPlanForageSupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [HorseActivityPeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [HorseActivityPeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [HorseActivityPeriod]
  barnPlanTurnoutDuration: [Int]
  barnPlanBlanketing: Boolean
}

enum CreateBarnPlanError {
  NOT_AUTHORIZED
  SERVICE
}

input UpdateBarnPlanInput {
  barnPlanName: String
  barnPlanStatus: BarnPlanStatus
  barnPlanPrice: Int
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanForageType: ForageType
  barnPlanForagePeriods: [HorseActivityPeriod]
  barnPlanForageSupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [HorseActivityPeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [HorseActivityPeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [HorseActivityPeriod]
  barnPlanTurnoutDuration: [Int]
  barnPlanBlanketing: Boolean
}

enum UpdateBarnPlanError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

enum BarnPlanType {
  GROUP
  INDIVIDUAL
}

enum BarnPlanSupplier {
  BARN
  BOARDER
}

enum BarnPlanStatus {
  ACTIVE
  INACTIVE
}

union BarnFamilyProfile = UserProfilePublic | ProProfilePublic

## BarnFamily
type BarnFamily {
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyRole: BarnRole!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyProfile:  BarnFamilyProfile!
  barnFamilyInvitedOn: AWSDateTime!
  barnFamilyInvitedBy: UserProfilePublic!
  barnFamilyAcceptedOn: AWSDateTime
  barnFamilyDeclinedOn: AWSDateTime
  barnFamilySuspendedOn: AWSDateTime
  barnFamilySuspendedBy: UserProfilePublic
  barnFamilyDeactivatedOn: AWSDateTime
  barnFamilyDeactivatedBy: UserProfilePublic
  barnFamilyAutoDeactivateOn: AWSDateTime
  barnFamilyAutoDeactivateSetBy: UserProfilePublic
  barnFamilyIsAnonymous: Boolean
}

type BarnFamilySummary {
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyProfile:  BarnFamilyProfile!
  barnFamilyRole: BarnRole!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyInvitedOn: AWSDateTime!
  barnFamilyInvitedBy: UserProfilePublic!
  barnFamilyAcceptedOn: AWSDateTime
  barnFamilyDeclinedOn: AWSDateTime
  barnFamilySuspendedOn: AWSDateTime
  barnFamilyDeactivatedOn: AWSDateTime
  barnFamilyAutoDeactivateOn: AWSDateTime
  barnFamilyIsAnonymous: Boolean
}

input GetBarnFamilySummariesInput {
  barnId: ID!
  associatedId: ID!
}

input GetBarnFamilyInput {
  barnId: ID!
  barnFamilyId: ID!
  associatedId: ID!
}

enum GetBarnFamilyError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_FAMILY
  NONEXISTENT_BARN_FAMILY_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  INVALID_BARN_FAMILY_ID
  INVALID_BARN_FAMILY_ID_PHONE_FORMAT
  INVALID_BARN_FAMILY_ID_PHONE_TYPE
  INACTIVE_BARN_FAMILY_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  SERVICE
}

input CreateBarnFamilyInput {
  associatedId: ID!
  barnId: ID!
  barnFamilyId: ID
  barnFamilyRole: BarnRole!
  barnFamilyAutoDeactivateOn: AWSDateTime
}

input UpdateBarnFamilyInput {
  associatedId: ID!
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyAutoDeactivateOn: AWSDateTime
}

input AcceptBarnFamilyQrCodeInput {
  qrCode: ID!
}

type UpsertBarnFamilyResult {
  result: MsResult!
  barnFamilyId: ID
  error: UpsertBarnFamilyError
}

enum UpsertBarnFamilyError {
  NOT_AUTHORIZED
  EXISTING_FAMILY
  INVALID_STATUS_UPDATE
  PROHIBITED_SELF_CREATE
  PROHIBITED_SELF_UPDATE
  EXCEEDED_BARN_FAMILY_LIMIT
  NONEXISTENT_BARN_FAMILY_ID
  INVALID_BARN_FAMILY_ID
  INVALID_BARN_FAMILY_ID_PHONE_FORMAT
  INVALID_BARN_FAMILY_ID_PHONE_TYPE
  INACTIVE_BARN_FAMILY_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  INVALID_DEACTIVATION_DATE
  SERVICE
}

enum AcceptBarnFamilyQrCodeError {
  EXISTING_OWNER
  EXISTING_FAMILY
  PROHIBITED_SELF_CREATE
  EXCEEDED_BARN_FAMILY_LIMIT
  NONEXISTENT_QR_CODE
  INVALID_QR_CODE
  SERVICE
}

enum BarnFamilyStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  INVITED
  DECLINED
}

## BarnActivity
type BarnActivities {
  lastKey: String
  activities: [BarnActivity]!
}

type BarnActivity {
  barnId: ID!
  barnActivityId: ID!
  barnActivityType: BarnActivityType!
  barnActivityStatus: BarnActivityStatus!
  barnActivityCreatedOn: AWSDateTime!
  barnActivityCreatedBy: UserProfilePublic!
  barnActivityDueDate: AWSDateTime
  barnActivityAssignedTo: UserProfilePublic
  barnActivityCompletedOn: AWSDateTime
  barnActivityCompletedBy: UserProfilePublic
  barnActivityCreateComment: String
  barnActivityCompleteComment: String
}

input GetBarnActivitiesInput {
  barnId: ID!
  associatedId: ID!
  activityStatus: BarnActivityStatus
  startKey: String
}

enum GetBarnActivitiesError {
  NOT_AUTHORIZED
  INVALID_STATUS_UPDATE
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  INVALID_START_KEY
  SERVICE
}


input CreateBarnActivityInput {
  barnId: ID!
  associatedId: ID!
  barnActivityType: BarnActivityType!
  barnActivityCompleteBy: AWSDateTime
  barnActivityAssignedTo: ID
  barnActivityCreateComment: String
}

enum CreateBarnActivityError {
  NOT_AUTHORIZED
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSIGNED_ID
  INVALID_ASSIGNED_ID
  INACTIVE_ASSIGNED_ID
  INVALID_DUE_DATE
  PROHIBITED_CREATE_COMMENT_CONTENT
  EXCEEDED_CREATE_COMMENT_LENGTH
  SERVICE
}

input UpdateBarnActivityInput {
  barnId: ID!
  associatedId: ID!
  barnActivityId: ID!
  barnActivityStatus: BarnActivityStatus
  barnActivityDueDate: AWSDateTime
  barnActivityAssignedTo: ID
  barnActivityCompleteComment: String
}

enum UpdateBarnActivityError {
  NOT_AUTHORIZED
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSIGNED_ID
  INVALID_ASSIGNED_ID
  INACTIVE_ASSIGNED_ID
  INVALID_DUE_DATE
  EXCEEDED_COMPLETE_COMMENT_LENGTH
  PROHIBITED_COMPLETE_COMMENT_CONTENT
  SERVICE
}

enum BarnActivityType {
  EMPTY_TRASH
  RESTOCK_SUPPLIES
  WASH_BLANKETS
  WASH_TROUGHS
  SCRUB_FEED_BUCKETS
  CLEAN_TACK
  REPAIR
  SWEEP_ISLES
  MOP_FLOORS
}

enum BarnActivityStatus {
  COMPLETE
  INCOMPLETE
}

## BarnNotes
type BarnNotes {
  barnNotes: [BarnNote]!
  lastKey: String
}

type BarnNote {
  barnId: ID!
  barnNoteId: ID!
  barnNoteSubjectId: ID!
  barnNoteType: BarnNoteType!
  barnNoteCreatedOn: AWSDateTime!
  barnNoteCreatedBy: UserProfilePublic!
  barnNoteTitle: String
  barnNoteBody: String!
  barnNoteIsPined: Boolean
}

input GetBarnNotesInput {
  barnId: ID!
  associatedId: ID!
  horseId: ID
  facilityId: ID
  barnNoteTypes: [BarnNoteType]
  startKey: String
}

enum GetBarnNotesError {
  NOT_AUTHORIZED
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_SUBJECT_ID
  INVALID_SUBJECT_ID
  INACTIVE_SUBJECT_ID
  INVALID_START_KEY
  SERVICE
}

input CreateBarnNoteInput {
  barnId: ID!
  associatedId: ID!
  horseId: ID
  facilityId: ID
  barnNoteTitle: String
  barnNoteBody: String!
  barnNoteIsPined: Boolean
}

enum CreateBarnNoteError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_HORSE_ID
  INVALID_HORSE_ID
  INACTIVE_HORSE_ID
  NONEXISTENT_FACILITY_ID
  INVALID_FACILITY_ID
  INACTIVE_FACILITY_ID
  PROHIBITED_TITLE_CONTENT
  PROHIBITED_BODY_CONTENT
  SERVICE
}


input UpdateBarnNoteInput {
  barnNoteId: ID!
  associatedId: ID!
  barnNoteIsPined: Boolean
}

enum UpdateBarnNoteError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_NOTE_ID
  INVALID_BARN_NOTE_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  SERVICE
}

input DeleteBarnNoteInput {
  barnNoteId: ID!
  associatedId: ID!
}

enum DeleteBarnNoteError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_NOTE_ID
  INVALID_BARN_NOTE_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  SERVICE
}

enum BarnNoteType {
  BOARD
  FACILITY
  EVENT
  PLAN
}

## BarnFacility
type BarnFacility {
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityType: BarnFacilityType!
  barnFacilityStatus: BarnFacilityStatus!
  barnFacilityName: String
  barnFacilityNumber: Float
  barnFacilityDescription: String
  barnFacilityManager: UserProfilePublic
  barnFacilityCreatedOn: AWSDateTime!
  barnFacilityCreatedBy: UserProfilePublic
  barnFacilityModifiedOn: AWSDateTime
  barnFacilityModifiedBy: UserProfilePublic
}

type BarnFacilitySummary {
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityType: BarnFacilityType!
  barnFacilityStatus: BarnFacilityStatus!
  BarnFacilityName: String
  BarnFacilityNumber: Float
}

input GetBarnFacilitySummariesInput {
  barnId: ID!
  associatedId: ID!
}

input GetBarnFacilityInput {
  barnId: ID!
  barnFacilityId: ID!
  associatedId: ID!
}

input CreateBarnFacilityInput {
  barnId: ID!
  barnFacilityType: BarnFacilityType!
  BarnFacilityName: String
  BarnFacilityNumber: Float
  BarnFacilityDescription: String
  barnFacilityManagerId: ID
}

input UpdateBarnFacilityInput {
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityStatus: BarnFacilityStatus
  barnFacilityName: String
  barnFacilityDescription: String
  barnFacilityManagerId: ID
}

enum BarnFacilityType {
  STALL
  PASTURE
  ARENA
  TRAIL
  WASH_BAY
  TACK_ROOM
  FEED_ROOM
  PEN
  OBSERVATION_AREA
  LOUNGE
  TURNOUT_AREA
  RUN
  HAY_STORAGE
  FARRIER_STATION
}

enum BarnFacilityStatus {
  IN_SERVICE
  OUT_OF_SERVICE
  CLOSED
}

union BarnFacilityProfile =
    StallProfile
  | PastureProfile
  | ArenaProfile
  | TrailProfile
  | WashBayProfile
  | TackRoomProfile
  | FeedRoomProfile
  | PenProfile
  | ObservationAreaProfile
  | LoungeProfile
  | RunProfile
  | TurnoutAreaProfile
  | HayStorageProfile
  | FarrierStationProfile

type StallProfile {
  stallProfileName: String
}

type PastureProfile {
  pastureProfileName: String
}

type ArenaProfile {
  arenaProfileName: String
}

type TrailProfile {
  trailProfileName: String
}

type WashBayProfile {
  washBayProfileName: String
}

type TackRoomProfile {
  tackRoomProfileName: String
}

type FeedRoomProfile {
  feedRoomProfileName: String
}

type PenProfile {
  penProfileName: String
}

type ObservationAreaProfile {
  observationAreaProfileName: String
}

type LoungeProfile {
  loungeOfficeProfileName: String
}

type TurnoutAreaProfile {
  turnoutAreaProfileName: String
}

type RunProfile {
  turnoutAreaProfileName: String
}

type HayStorageProfile {
  hayStorageProfileName: String
}

type FarrierStationProfile {
  farrierStationProfileName: String
}


## BarnAnnouncements
type BarnAnnouncements {
  barnAnnouncements: [BarnAnnouncement]!
  lastKey: String
}

type BarnAnnouncement {
  barnId: ID!
  barnAnnouncementId: ID!
  barnAnnouncementAudience: BarnAnnouncementAudience!
  barnAnnouncementPriority: BarnAnnouncementPriority!
  barnAnnouncementCreatedOn: AWSDateTime!
  barnAnnouncementCreatedBy: UserProfilePublic!
  barnAnnouncementTitle: String
  barnAnnouncementBody: String!
}

input GetBarnAnnouncementsInput {
  barnId: ID!
  associatedId: ID!
  startKey: String
}

enum GetBarnAnnouncementsError {
  NOT_AUTHORIZED
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  INVALID_START_KEY
  SERVICE
}

input CreateBarnAnnouncementInput {
  barnId: ID!
  associatedId: ID!
  barnAnnouncementAudience: BarnAnnouncementAudience!
  barnAnnouncementPriority: BarnAnnouncementPriority!
  barnNoteTitle: String
  barnNoteBody: String!
}

enum CreateBarnAnnouncementError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  PROHIBITED_TITLE_CONTENT
  PROHIBITED_BODY_CONTENT
  SERVICE
}


input UpdateBarnAnnouncementInput {
  barnAnnouncementId: ID!
  associatedId: ID!
  barnAnnouncementPriority: BarnAnnouncementPriority
}

enum UpdateBarnAnnouncementError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  SERVICE
}

input DeleteBarnAnnouncementInput {
  barnAnnouncementId: ID!
  associatedId: ID!
}

enum DeleteBarnAnnouncementError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_ANNOUNCEMENT_ID
  INVALID_BARN_ANNOUNCEMENT_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSOCIATED_ID
  INVALID_ASSOCIATED_ID
  INACTIVE_ASSOCIATED_ID
  SERVICE
}

enum BarnAnnouncementAudience {
  ALL
  STAFF
  PRO
  BOARDER
  MEMBER
  GUEST
}

enum BarnAnnouncementPriority{
  URGENT
  STANDARD
}