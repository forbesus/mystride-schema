## Queries
type Query {
  ## Barn
  getBarns(input: GetBarnsInput): BarnsResult!

  ## BarnProfile
  getBarnProfile(input: GetBarnProfileInput): BarnProfileResult!

  ## BarnBoard
  getBarnBoardSummaries(
    input: GetBarnBoardSummariesInput
  ): BarnBoardSummariesResult!
  getBarnBoard(input: GetBarnBoardInput): BarnBoardResult!

  ## BarnFamily
  getBarnFamilySummaries(
    input: GetBarnFamilySummariesInput
  ): BarnFamilySummariesResult!
  getBarnFamily(input: GetBarnFamilyInput): BarnFamilyResult!

  ## BarnPlan
  getBarnPlanSummaries(
    input: GetBarnPlanSummariesInput
  ): BarnPlanSummariesResult!
  getBarnPlan(input: GetBarnPlanInput): BarnPlanResult!

  ## BarnAnnouncements
  getBarnAnnouncements(
    input: GetBarnAnnouncementsInput
  ): BarnAnnouncementsResult!

  ## BarnActivities
  getBarnActivities(input: GetBarnActivitiesInput): BarnActivitiesResult!

  ## BarnNotes
  getBarnNotes(input: GetBarnNotesInput): BarnNotesResult!

  ## BarnFacility
  getBarnFacilitySummaries(
    input: GetBarnFacilitySummariesInput
  ): BarnFacilitySummariesResult!
  getBarnFacility(input: GetBarnFacilityInput): BarnFacilityResult!
}

## Mutations
type Mutation {
  ## Barn
  createBarn(input: CreateBarnInput): BarnResult!

  ## BarnProfile
  updateBarnProfile(input: UpdateBarnProfileInput): BarnProfileResult!

  ## BarnBoard
  createBarnBoard(input: CreateBarnBoardInput): BarnBoardResult!
  updateBarnBoard(input: UpdateBarnBoardInput): BarnBoardResult!

  ## BarnPlan
  createBarnPlan(input: CreateBarnPlanInput): BarnPlanResult!
  updateBarnPlan(input: UpdateBarnPlanInput): BarnPlanResult!
  deleteBarnPlan(input: DeleteBarnPlanInput): BarnPlanResult!

  ## BarnFamily
  createBarnFamily(input: CreateBarnFamilyInput): BarnFamilyResult!
  updateBarnFamily(input: UpdateBarnFamilyInput): BarnFamilyResult!
  acceptBarnFamilyQrCode(input: AcceptBarnFamilyQrCodeInput): BarnFamilyResult!

  ## BarnAnnouncement
  createBarnAnnouncement(
    input: CreateBarnAnnouncementInput
  ): BarnAnnouncementResult!
  updateBarnAnnouncement(
    input: UpdateBarnAnnouncementInput
  ): BarnAnnouncementResult!
  deleteBarnAnnouncement(
    input: DeleteBarnAnnouncementInput
  ): BarnAnnouncementResult!

  ## BarnActivity
  createBarnActivity(input: CreateBarnActivityInput): BarnActivityResult!
  updateBarnActivity(input: UpdateBarnActivityInput): BarnActivityResult!
  deleteBarnActivity(input: DeleteBarnActivityInput): BarnActivityResult!

  ## BarnNote
  createBarnNote(input: CreateBarnNoteInput): BarnNoteResult!
  updateBarnNote(input: UpdateBarnNoteInput): BarnNoteResult!
  deleteBarnNote(input: DeleteBarnNoteInput): BarnNoteResult!

  ## BarnFacility
  createBarnFacility(input: CreateBarnFacilityInput): BarnFacilityResult!
  updateBarnFacility(input: UpdateBarnFacilityInput): BarnFacilityResult!
  deleteBarnFacility(input: DeleteBarnFacilityInput): BarnFacilityResult!
}

## Subscriptions
type Subscription {
  ## BarnProfile
  subscribeBarnProfileUpdatesBarnId(barnId: ID!): BarnProfileResult
    @aws_subscribe(mutations: ["updateBarnProfile"])

  ## BarnBoard
  subscribeBarnBoardUpdatesBarnId(barnId: ID!): BarnBoardResult
    @aws_subscribe(mutations: ["createBarnBoard", "updateBarnBoard"])

  subscribeBarnBoardUpdatesHorseId(horseId: ID!): BarnBoardResult
    @aws_subscribe(mutations: ["createBarnBoard", "updateBarnBoard"])

  ## BarnFamily
  subscribeBarnFamilyUpdatesBarnId(barnId: ID!): BarnFamilyResult
    @aws_subscribe(mutations: ["createBarnFamily", "updateBarnFamily"])

  subscribeBarnFamilyUpdatesFamilyId(barnFamilyId: ID!): BarnFamilyResult
    @aws_subscribe(mutations: ["createBarnFamily", "updateBarnFamily"])

  ## BarnAnnouncements
  subscribeBarnAnnouncementsBarnId(barnId: ID!): BarnAnnouncementResult
    @aws_subscribe(
      mutations: [
        "createBarnAnnouncement"
        "updateBarnAnnouncement"
        "deleteBarnAnnouncement"
      ]
    )

  ## BarnActivities
  subscribeBarnActivitiesBarnId(barnId: ID!): BarnActivityResult
    @aws_subscribe(
      mutations: [
        "createBarnActivity"
        "updateBarnActivity"
        "deleteBarnActivity"
      ]
    )

  ## BarnNotes
  subscribeBarnNotesBarnId(barnId: ID!): BarnNoteResult
    @aws_subscribe(
      mutations: ["createBarnNote", "updateBarnNote", "deleteBarnNote"]
    )

  subscribeBarnNotesSubjectId(subjectId: ID!): BarnNoteResult
    @aws_subscribe(
      mutations: ["createBarnNote", "updateBarnNote", "deleteBarnNote"]
    )

  ## BarnFacilities
  subscribeBarnFacilitiesBarnId(barnId: ID!): BarnFacilityResult
    @aws_subscribe(
      mutations: [
        "createBarnFacility"
        "updateBarnFacility"
        "deleteBarnFacility"
      ]
    )
}

## Barn
type Barn {
  barnId: ID!
  barnRole: BarnRole!
  barnFamilySummary: BarnFamilySummary
  barnProfileSummary: BarnProfileSummary!
}

input GetBarnsInput {
  actingId: ID!
  startKey: String
}

type BarnsResult {
  result: MsResult!
  barns: [Barn]
  lastKey: String
  error: BarnError
}

input CreateBarnInput {
  barnOwnerId: ID!
  barnDisplayName: String!
  barnType: BarnType!
  barnAddressInput: UpsertMsAddressInput!
}

input DeleteBarnInput {
  actingId: ID!
  barnId: ID!
}

type BarnResult {
  result: MsResult!
  barn: Barn
  error: BarnError
}

enum BarnError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  EXCEEDED_NAME_LENGTH
  EXCEEDED_BARN_LIMIT
  EXCEEDED_DISPLAY_NAME_LENGTH
  INVALID_ADDRESS
  PROHIBITED_DISPLAY_NAME_CONTENT
  SERVICE
}

enum BarnRole {
  OWNER
  MANAGER
  STAFF
  PRO
  BOARDER
  MEMBER
  GUEST
  HORSE
}

## BarnProfile
type BarnProfile {
  barnId: ID!
  barnOwner: UserProfilePublic!
  barnPhoneId: ID
  barnEmailId: ID
  barnType: BarnType!
  barnGeohash: String!
  barnStatus: BarnStatus!
  barnDisplayName: String!
  barnCreatedOn: AWSDateTime!
  barnCreatedBy: UserProfilePublic!
  barnModifiedOn: AWSDateTime
  barnModifiedBy: UserProfilePublic
  barnSuspendedOn: AWSDateTime
  barnSuspendedBy: UserProfilePublic
  barnDeactivatedOn: AWSDateTime
  barnDeactivatedBy: UserProfilePublic
  barnDeactivationReason: BarnDeactivationReason
  barnDeactivationComment: String
  barnTimezone: MsTimezone!
  barnAvatarId: ID!
  barnAddress: MsAddress!
  barnLegalName: String
  barnWelcomeMessage: String
  barnBio: String
}

input GetBarnProfileInput {
  actingId: ID!
  barnId: ID!
}

input UpdateBarnProfileInput {
  actingId: ID!
  barnId: ID!
  barnAvatarId: ID
  barnDisplayName: String
  barnPhoneId: String
  barnEmailId: String
  barnLegalName: String
  barnTimezone: MsTimezone
  barnWelcomeMessage: String
  barnAddress: UpsertMsAddressInput
}

type BarnProfileSummary {
  barnId: ID!
  barnOwner: UserProfilePublic!
  barnType: BarnType!
  barnStatus: BarnStatus!
  barnDisplayName: String!
  barnTimezone: MsTimezone!
  barnAvatarId: ID!
  barnCity: String
  barnState: String
  barnCountry: String
  barnCountryCode: MsCountryCode
}

type BarnProfilePublic {
  barnId: ID!
  barnType: BarnType!
  barnDisplayName: String!
  barnAvatarId: ID!
  barnCity: String
  barnState: String
  barnCountry: String
  barnCountryCode: String
}

type BarnProfileResult {
  result: MsResult!
  barnProfile: BarnProfile
  error: BarnProfileError
}

enum BarnProfileError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  INVALID_PHONE_FORMAT
  INVALID_EMAIL_FORMAT
  INVALID_AVATAR_ID
  INVALID_ADDRESS
  EXCEEDED_DISPLAY_NAME_LENGTH
  EXCEEDED_LEGAL_NAME_LENGTH
  EXCEEDED_WELCOME_MESSAGE_LENGTH
  EXCEEDED_BIO_LENGTH
  PROHIBITED_DISPLAY_NAME_CONTENT
  PROHIBITED_LEGAL_NAME_CONTENT
  PROHIBITED_WELCOME_MESSAGE_CONTENT
  PROHIBITED_BIO_CONTENT
  SERVICE
}

enum BarnType {
  COMMERCIAL
  PERSONAL
}

enum BarnStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum BarnDeactivationReason {
  OWNER
  INACTIVITY
  VIOLATION
}

## BarnBoard
type BarnBoard {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus!
  barnBoardHorse: HorseProfilePublic!
  barnBoardBarn: BarnProfilePublic!
  barnBoardFacilitySummary: BarnFacilitySummary
  barnBoardPlan: BarnPlan
  barnBoardInitiatedBy: UserProfilePublic
  barnBoardInitiatedOn: AWSDateTime!
  barnBoardModifiedBy: UserProfilePublic
  barnBoardModifiedOn: AWSDateTime
  barnBoardAcceptedBy: UserProfilePublic
  barnBoardAcceptedOn: AWSDateTime
  barnBoardDeclinedBy: UserProfilePublic
  barnBoardDeclinedOn: AWSDateTime
  barnBoardWhitelistedBy: UserProfilePublic
  barnBoardWaitlistedOn: AWSDateTime
  barnBoardSuspendedBy: UserProfilePublic
  barnBoardSuspendedOn: AWSDateTime
  barnBoardDeactivatedBy: UserProfilePublic
  barnBoardDeactivatedOn: AWSDateTime
  barnBoardAutoDeactivateSetBy: UserProfilePublic
  barnBoardAutoDeactivateOn: AWSDateTime
  barnBoardComment: String
}

type BarnBoardSummary {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus!
  barnBoardHorseSummary: HorseProfilePublic!
  barnBoardBarnSummary: BarnProfilePublic!
  barnBoardFacilitySummary: BarnFacilitySummary
}

input GetBarnBoardSummariesInput {
  actingId: ID!
  barnId: ID
  horseId: ID
  startKey: String
}

type BarnBoardSummariesResult {
  result: MsResult!
  barnBoardSummaries: [BarnBoardSummary]
  lastKey: String
  error: BarnBoardError
}

input GetBarnBoardInput {
  actingId: ID!
  barnId: ID!
  horseId: ID!
  associatedId: ID!
}

input CreateBarnBoardInput {
  actingId: ID!
  barnId: ID!
  horseId: ID!
  barnBoardRequestedPlanId: ID
}

input UpdateBarnBoardInput {
  barnId: ID!
  horseId: ID!
  barnBoardStatus: BarnBoardStatus
  barnBoardFacilityId: ID
  barnBoardPlanId: ID
}

type BarnBoardResult {
  result: MsResult!
  barnBoard: BarnBoard
  error: BarnBoardError
}

enum BarnBoardError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_HORSE_ID
  INVALID_HORSE_ID
  INACTIVE_HORSE_ID
  NONEXISTENT_BARN_PLAN_ID
  INVALID_BARN_PLAN_ID
  NONEXISTENT_BARN_FACILITY_ID
  INVALID_BARN_FACILITY_ID
  MISSING_REQUIRED_ID
  INVALID_STATUS_CHANGE
  EXISTING_BOARD
  EXCEEDED_BARN_BOARD_LIMIT
  SERVICE
}

enum BarnBoardStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  REQUESTED
  WAITLISTED
  DECLINED
}

## BarnPlan
type BarnPlan {
  barnPlanId: ID!
  barnPlanType: BarnPlanType!
  barnPlanStatus: BarnPlanStatus!
  barnPlanCreatedOn: AWSDateTime!
  barnPlanCreatedBy: UserProfilePublic!
  barnPlanModifiedOn: AWSDateTime
  barnPlanModifiedBy: UserProfilePublic
  barnPlanName: String
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanHayType: ForageType
  barnPlanHayPeriods: [MsServicePeriod]
  barnPlanHaySupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [MsServicePeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [MsServicePeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [MsServicePeriod]
  barnPlanTurnoutBreakfastFacility: ID
  barnPlanTurnoutLunchFacilityId: ID
  barnPlanTurnoutDinnerFacilityId: ID
  barnPlanTurnoutEveningFacilityId: ID
  barnPlanTurnoutBreakfastDuration: Int
  barnPlanTurnoutBreakfastDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutLunchDuration: Int
  barnPlanTurnoutLunchDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutDinnerDuration: Int
  barnPlanTurnoutDinnerDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutEveningDuration: Int
  barnPlanTurnoutEveningDurationUnit: MsTurnoutDurationUnit
  barnPlanBlanketing: Boolean
  barnPlanBlanketType: MsBlanketType
}

type BarnPlanSummary {
  barnPlanId: ID!
  barnPlanType: BarnPlanType!
  barnPlanStatus: BarnPlanStatus!
  barnPlanName: String
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
}

input GetBarnPlanSummariesInput {
  actingId: ID!
  barnId: ID!
  associatedId: ID!
}

type BarnPlanSummariesResult {
  result: MsResult!
  barnPlanSummaries: [BarnPlanSummary]
  lastKey: String
  error: BarnPlanError
}

input GetBarnPlanInput {
  actingId: ID!
  barnPlanId: ID!
  associatedId: ID!
}

input CreateBarnPlanInput {
  actingId: ID!
  barnId: ID!
  barnPlanName: String
  barnPlanType: BarnPlanType!
  barnPlanPrice: Int
  barnPlanCurrency: MsCurrencyCode
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanForageType: ForageType
  barnPlanHForagePeriods: [MsServicePeriod]
  barnPlanForageSupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [MsServicePeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [MsServicePeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [MsServicePeriod]
  barnPlanTurnoutBreakfastFacility: ID
  barnPlanTurnoutLunchFacilityId: ID
  barnPlanTurnoutDinnerFacilityId: ID
  barnPlanTurnoutEveningFacilityId: ID
  barnPlanTurnoutBreakfastDuration: Int
  barnPlanTurnoutBreakfastDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutLunchDuration: Int
  barnPlanTurnoutLunchDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutDinnerDuration: Int
  barnPlanTurnoutDinnerDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutEveningDuration: Int
  barnPlanTurnoutEveningDurationUnit: MsTurnoutDurationUnit
  barnPlanBlanketing: Boolean
  barnPlanBlanketType: MsBlanketType
}

input UpdateBarnPlanInput {
  actingId: ID!
  barnId: ID!
  barnPlanId: ID!
  barnPlanName: String
  barnPlanStatus: BarnPlanStatus
  barnPlanPrice: Int
  barnPlanDescription: String
  barnPlanForage: Boolean
  barnPlanForageType: ForageType
  barnPlanForagePeriods: [MsServicePeriod]
  barnPlanForageSupplier: BarnPlanSupplier
  barnPlanGrain: Boolean
  barnPlanGrainPeriods: [MsServicePeriod]
  barnPlanGrainSupplier: BarnPlanSupplier
  barnPlanSupplement: Boolean
  barnPlanSupplementPeriods: [MsServicePeriod]
  barnPlanSupplementSupplier: BarnPlanSupplier
  barnPlanMedication: Boolean
  barnPlanTurnout: Boolean
  barnPlanTurnoutPeriods: [MsServicePeriod]
  barnPlanTurnoutBreakfastFacility: ID
  barnPlanTurnoutLunchFacilityId: ID
  barnPlanTurnoutDinnerFacilityId: ID
  barnPlanTurnoutEveningFacilityId: ID
  barnPlanTurnoutBreakfastDuration: Int
  barnPlanTurnoutBreakfastDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutLunchDuration: Int
  barnPlanTurnoutLunchDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutDinnerDuration: Int
  barnPlanTurnoutDinnerDurationUnit: MsTurnoutDurationUnit
  barnPlanTurnoutEveningDuration: Int
  barnPlanTurnoutEveningDurationUnit: MsTurnoutDurationUnit
  barnPlanBlanketing: Boolean
  barnPlanBlanketType: MsBlanketType
}

input DeleteBarnPlanInput {
  actingId: ID!
  barnId: ID!
  barnPlanId: ID!
}

type BarnPlanResult {
  result: MsResult!
  barnPlan: BarnPlan
  lastKey: String
  error: BarnPlanError
}

enum BarnPlanError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_BARN_PLAN_ID
  INVALID_BARN_PLAN_ID
  INVALID_STATUS_UPDATE
  EXCEEDED_BARN_PLAN_LIMIT
  INVALID_DEACTIVATION_DATE
  SERVICE
}

enum BarnPlanType {
  PACKAGE
  CUSTOM
}

enum BarnPlanSupplier {
  BARN
  BOARDER
}

enum BarnPlanStatus {
  ACTIVE
  INACTIVE
}

enum MsTurnoutDurationUnit {
  MINUTES
  HOURS
}

## BarnFamily
type BarnFamily {
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyRole: BarnRole!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyProfile: BarnFamilyProfile!
  barnFamilyInvitedOn: AWSDateTime!
  barnFamilyInvitedBy: UserProfilePublic!
  barnFamilyAcceptedOn: AWSDateTime
  barnFamilyDeclinedOn: AWSDateTime
  barnFamilySuspendedOn: AWSDateTime
  barnFamilySuspendedBy: UserProfilePublic
  barnFamilyDeactivatedOn: AWSDateTime
  barnFamilyDeactivatedBy: UserProfilePublic
  barnFamilyAutoDeactivateOn: AWSDateTime
  barnFamilyAutoDeactivateSetBy: UserProfilePublic
  barnFamilyIsAnonymous: Boolean
}

type BarnFamilySummary {
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyProfile: BarnFamilyProfile!
  barnFamilyRole: BarnRole!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyInvitedOn: AWSDateTime!
  barnFamilyInvitedBy: UserProfilePublic!
  barnFamilyAcceptedOn: AWSDateTime
  barnFamilyDeclinedOn: AWSDateTime
  barnFamilySuspendedOn: AWSDateTime
  barnFamilyDeactivatedOn: AWSDateTime
  barnFamilyAutoDeactivateOn: AWSDateTime
  barnFamilyIsAnonymous: Boolean
}

input GetBarnFamilySummariesInput {
  actingId: ID!
  barnId: ID
  barnFamilyId: ID
  startKey: String
}

type BarnFamilySummariesResult {
  result: MsResult!
  barnFamilySummaries: [BarnFamilySummary]
  lastKey: String
  error: BarnFamilyError
}

input GetBarnFamilyInput {
  actingId: ID!
  barnId: ID!
  barnFamilyId: ID!
}

input CreateBarnFamilyInput {
  actingId: ID!
  barnId: ID
  barnFamilyId: ID!
  barnFamilyRole: BarnRole!
  barnFamilyAutoDeactivateOn: AWSDateTime
}

input UpdateBarnFamilyInput {
  actingId: ID!
  barnId: ID!
  barnFamilyId: ID!
  barnFamilyStatus: BarnFamilyStatus!
  barnFamilyAutoDeactivateOn: AWSDateTime
}

input AcceptBarnFamilyQrCodeInput {
  actingId: ID!
  barnQrCode: ID!
}

type BarnFamilyResult {
  result: MsResult!
  barnFamily: BarnFamily
  error: BarnFamilyError
}

enum BarnFamilyError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_BARN_FAMILY_ID
  INVALID_BARN_FAMILY_ID
  INVALID_BARN_FAMILY_ID_PHONE_FORMAT
  INVALID_BARN_FAMILY_ID_PHONE_TYPE
  INACTIVE_BARN_FAMILY_ID
  MISSING_REQUIRED_ID
  EXISTING_FAMILY
  INVALID_STATUS_UPDATE
  PROHIBITED_SELF_CREATE
  PROHIBITED_SELF_UPDATE
  EXCEEDED_BARN_FAMILY_LIMIT
  INVALID_DEACTIVATION_DATE
  SERVICE
}

enum AcceptBarnFamilyQrCodeError {
  EXISTING_OWNER
  EXISTING_FAMILY
  PROHIBITED_SELF_CREATE
  EXCEEDED_BARN_FAMILY_LIMIT
  NONEXISTENT_QR_CODE
  INVALID_QR_CODE
  SERVICE
}

enum BarnFamilyStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  INVITED
  DECLINED
}

union BarnFamilyProfile = UserProfilePublic | ProProfilePublic

## BarnActivity
type BarnActivity {
  barnId: ID!
  barnActivityId: ID!
  barnActivityType: BarnActivityType!
  barnActivityStatus: BarnActivityStatus!
  barnActivityCreatedOn: AWSDateTime!
  barnActivityCreatedBy: UserProfilePublic!
  barnActivityDueDate: AWSDateTime
  barnActivityAssignedTo: UserProfilePublic
  barnActivityCompletedOn: AWSDateTime
  barnActivityCompletedBy: UserProfilePublic
  barnActivityCreateComment: String
  barnActivityCompleteComment: String
}

input GetBarnActivitiesInput {
  actingId: ID!
  barnId: ID!
  activityStatus: BarnActivityStatus
  startKey: String
}

type BarnActivitiesResult {
  result: MsResult!
  activities: [BarnActivity]
  lastKey: String
  error: BarnActivityError
}

input CreateBarnActivityInput {
  actingId: ID!
  barnId: ID!
  barnActivityType: BarnActivityType!
  barnActivityCompleteBy: AWSDateTime
  barnActivityAssignedTo: ID
  barnActivityCreateComment: String
}

input UpdateBarnActivityInput {
  actingId: ID!
  barnId: ID!
  barnActivityId: ID!
  barnActivityStatus: BarnActivityStatus
  barnActivityDueDate: AWSDateTime
  barnActivityAssignedTo: ID
  barnActivityCompleteComment: String
}

input DeleteBarnActivityInput {
  actingId: ID!
  barnId: ID!
  barnActivityId: ID!
}

input BarnActivityResult {
  result: MsResult!
  barnActivity: BarnActivity
  error: BarnActivityError
}

enum BarnActivityError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ASSIGNED_TO_ID
  INVALID_ASSIGNED_TO_ID
  INACTIVE_ASSIGNED_TO_ID
  INVALID_DUE_DATE
  PROHIBITED_CREATE_COMMENT_CONTENT
  EXCEEDED_CREATE_COMMENT_LENGTH
  INVALID_STATUS_UPDATE
  INVALID_START_KEY
  SERVICE
}

enum BarnActivityType {
  EMPTY_TRASH
  RESTOCK_SUPPLIES
  WASH_BLANKETS
  WASH_TROUGHS
  SCRUB_FEED_BUCKETS
  CLEAN_TACK
  REPAIR
  SWEEP_ISLES
  MOP_FLOORS
}

enum BarnActivityStatus {
  COMPLETE
  INCOMPLETE
}

## BarnNotes
type BarnNote {
  barnId: ID!
  barnNoteId: ID!
  barnNoteSubjectId: ID!
  barnNoteCreatedOn: AWSDateTime!
  barnNoteCreatedBy: UserProfilePublic!
  barnNoteTitle: String
  barnNoteBody: String!
  barnNoteIsPined: Boolean
}

input GetBarnNotesInput {
  actingId: ID!
  barnId: ID!
  horseId: ID
  barnFacilityId: ID
  startKey: String
}

type BarnNotesResult {
  result: MsResult!
  barnNotes: [BarnNote]
  lastKey: String
  error: BarnNoteError
}

input CreateBarnNoteInput {
  actingId: ID!
  barnId: ID!
  horseId: ID
  facilityId: ID
  barnNoteTitle: String
  barnNoteBody: String!
  barnNoteIsPined: Boolean
}

input UpdateBarnNoteInput {
  actingId: ID!
  barnId: ID!
  barnNoteId: ID!
  barnNoteIsPined: Boolean
}

input DeleteBarnNoteInput {
  actingId: ID!
  barnId: ID!
  barnNoteId: ID!
}

type BarnNoteResult {
  result: MsResult!
  error: BarnNoteError
}

enum BarnNoteError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_HORSE_ID
  INVALID_HORSE_ID
  INACTIVE_HORSE_ID
  NONEXISTENT_FACILITY_ID
  INVALID_FACILITY_ID
  INACTIVE_FACILITY_ID
  PROHIBITED_TITLE_CONTENT
  PROHIBITED_BODY_CONTENT
  SERVICE
}

## BarnFacility
type BarnFacility {
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityType: BarnFacilityType!
  barnFacilityStatus: BarnFacilityStatus!
  barnFacilityName: String
  barnFacilityNumber: Float
  barnFacilityDescription: String
  barnFacilityManager: UserProfilePublic
  barnFacilityCreatedOn: AWSDateTime!
  barnFacilityCreatedBy: UserProfilePublic
  barnFacilityModifiedOn: AWSDateTime
  barnFacilityModifiedBy: UserProfilePublic
}

type BarnFacilitySummary {
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityType: BarnFacilityType!
  barnFacilityStatus: BarnFacilityStatus!
  BarnFacilityName: String
  BarnFacilityNumber: Float
}

input GetBarnFacilitySummariesInput {
  actingId: ID!
  barnId: ID!
}

type BarnFacilitySummariesResult {
  result: MsResult!
  barnFacilitySummaries: [BarnFacilitySummary]
  lastKey: String
  error: BarnNoteError
}

input GetBarnFacilityInput {
  actingId: ID!
  barnId: ID!
  barnFacilityId: ID!
}

input CreateBarnFacilityInput {
  actingId: ID!
  barnId: ID!
  barnFacilityType: BarnFacilityType!
  BarnFacilityName: String
  BarnFacilityNumber: Float
  BarnFacilityDescription: String
  barnFacilityManagerId: ID
}

input UpdateBarnFacilityInput {
  actingId: ID!
  barnId: ID!
  barnFacilityId: ID!
  barnFacilityStatus: BarnFacilityStatus
  barnFacilityName: String
  barnFacilityDescription: String
  barnFacilityManagerId: ID
}

input DeleteBarnFacilityInput {
  actingId: ID!
  barnId: ID!
  barnFacilityId: ID!
}

type BarnFacilityResult {
  result: MsResult!
  barnFacility: BarnFacility
  error: BarnFacilityError
}

enum BarnFacilityError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_FACILITY_ID
  INVALID_FACILITY_ID
  INVALID_STATUS_CHANGE
  NONEXISTENT_MANAGER_ID
  INVALID_MANAGER_ID
  INACTIVE_MANAGER_ID
  EXISTING_DUPLICATE_NAME
  EXCEEDED_NAME_LENGTH
  PROHIBITED_DUPLICATE_NAME
  EXCEEDED_DESCRIPTION_LENGTH
  PROHIBITED_NAME_CONTENT
  PROHIBITED_DESCRIPTION_CONTENT
  SERVICE
}

enum BarnFacilityType {
  STALL
  PASTURE
  ARENA
  TRAIL
  WASH_BAY
  TACK_ROOM
  FEED_ROOM
  PEN
  OBSERVATION_AREA
  LOUNGE
  TURNOUT_AREA
  RUN
  HAY_STORAGE
  FARRIER_STATION
  EXAM_AREA
}

enum BarnFacilityStatus {
  IN_SERVICE
  OUT_OF_SERVICE
  CLOSED
}

union BarnFacilityProfile =
    StallProfile
  | PastureProfile
  | ArenaProfile
  | TrailProfile
  | WashBayProfile
  | TackRoomProfile
  | FeedRoomProfile
  | PenProfile
  | ObservationAreaProfile
  | LoungeProfile
  | RunProfile
  | TurnoutAreaProfile
  | HayStorageProfile
  | FarrierStationProfile

type StallProfile {
  stallProfileName: String
}

type PastureProfile {
  pastureProfileName: String
}

type ArenaProfile {
  arenaProfileName: String
}

type TrailProfile {
  trailProfileName: String
}

type WashBayProfile {
  washBayProfileName: String
}

type TackRoomProfile {
  tackRoomProfileName: String
}

type FeedRoomProfile {
  feedRoomProfileName: String
}

type PenProfile {
  penProfileName: String
}

type ObservationAreaProfile {
  observationAreaProfileName: String
}

type LoungeProfile {
  loungeOfficeProfileName: String
}

type TurnoutAreaProfile {
  turnoutAreaProfileName: String
}

type RunProfile {
  turnoutAreaProfileName: String
}

type HayStorageProfile {
  hayStorageProfileName: String
}

type FarrierStationProfile {
  farrierStationProfileName: String
}

## BarnAnnouncement
type BarnAnnouncement {
  barnId: ID!
  barnAnnouncementId: ID!
  barnAnnouncementAudience: [BarnRole!]!
  barnAnnouncementPriority: BarnAnnouncementPriority!
  barnAnnouncementCreatedOn: AWSDateTime!
  barnAnnouncementCreatedBy: UserProfilePublic!
  barnAnnouncementTitle: String
  barnAnnouncementBody: String!
}

input GetBarnAnnouncementsInput {
  actingId: ID!
  barnId: ID!
  startKey: String
}

type BarnAnnouncementsResult {
  result: MsResult!
  barnAnnouncements: [BarnAnnouncement]
  lastKey: String
  error: BarnAnnouncementError
}

input GetBarnAnnouncementInput {
  actingId: ID!
  barnId: ID!
  startKey: String
}

input CreateBarnAnnouncementInput {
  actingId: ID!
  barnId: ID!
  barnAnnouncementAudience: [BarnRole!]!
  barnAnnouncementPriority: BarnAnnouncementPriority!
  barnAnnouncementTitle: String
  barnAnnouncementBody: String!
}

input UpdateBarnAnnouncementInput {
  actingId: ID!
  barnAnnouncementId: ID!
  barnAnnouncementAudience: [BarnRole!]
  barnAnnouncementPriority: BarnAnnouncementPriority
}

input DeleteBarnAnnouncementInput {
  actingId: ID!
  barnAnnouncementId: ID!
}

type BarnAnnouncementResult {
  result: MsResult!
  announcement: BarnAnnouncement
  error: BarnAnnouncementError
}

enum BarnAnnouncementError {
  NOT_AUTHORIZED
  NONEXISTENT_BARN_ID
  INVALID_BARN_ID
  INACTIVE_BARN_ID
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  EXCEEDED_TITLE_LENGTH
  EXCEEDED_BODY_LENGTH
  PROHIBITED_TITLE_CONTENT
  PROHIBITED_BODY_CONTENT
  SERVICE
}

enum BarnAnnouncementPriority {
  URGENT
  STANDARD
}
