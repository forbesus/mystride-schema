
## Queries
type Query {

  ## HorseSummaries
  getHorseSummaries(input: GetHorseSummariesInput): [HorseSummary]!

  ## HorseProfile
  getHorseProfile(input: GetHorseProfileInput): HorseProfile!

  ## HorseShare
  getHorseShareSummaries(input: GetHorseShareSummariesInput): [HorseShareSummary]!
  getHorseShare(input: GetHorseShareInput): HorseShare!

  ## HorseActivities
  getHorseActivities(input: GetHorseActivitiesInput): HorseActivities!

  ## HorseNotes
  getHorseNotes(input: GetHorseNotesInput): HorseNotes!

  ## HorseServings
  getHorseServings(input: GetHorseServingsInput): [HorseServing]!
}


## Mutations
type Mutation {

  ## Horse
  createHorse(input: CreateHorseInput): ID!
  
  ## HorseProfile
  updateHorseProfile(input: UpdateHorseProfileInput): HorseProfile!

  ## HorseShare
  createHorseShare(input: CreateHorseShareInput): ID!
  updateHorseShare(input: UpdateHorseShareInput): ID!
  acceptHorseShareQrCode(input: AcceptHorseShareQrCodeInput): ID!
  
  ## HorseActivities
  createHorseActivity(input: CreateHorseActivityInput): HorseActivity!
  updateHorseActivity(input: UpdateHorseActivityInput): HorseActivity!

  ## HorseNotes
  createHorseNote(input: CreateHorseNoteInput): HorseNote!
  updateHorseNote(input: UpdateHorseNoteInput): HorseNote!

  ## HorseServings
  createHorseServing(input: CreateHorseServingInput): HorseServing!
  updateHorseServing(input: UpdateHorseServingInput): HorseServing!
}


## Subscriptions
type Subscription {

  ## HorseProfile
  subscribeHorseProfile(horseId: ID!): HorseProfile
  @aws_subscribe(mutations: ["updateHorseProfile"])

  ## HorseShare
  subscribeHorseSharesByHorseId(horseId: ID!): ID
  @aws_subscribe(mutations: ["createHorseShare", "updateHorseShare"])

  subscribeHorseSharesByShareId(horseShareId: ID!): ID
  @aws_subscribe(mutations: ["createHorseShare", "updateHorseShare"])

  ## HorseActivities
  subscribeHorseActivitiesByHorseId(horseId: ID!): HorseActivity
  @aws_subscribe(mutations: ["createHorseActivity", "updateHorseActivity"])

  subscribeHorseActivitiesByAssignedId(horseActivityAssignedToId: ID!): HorseActivity
  @aws_subscribe(mutations: ["createHorseActivity", "updateHorseActivity"])

  ## HorseNotes
  subscribeHorseNotesByHorseId(horseId: ID!): HorseNote
  @aws_subscribe(mutations: ["createHorseNote", "updateHorseNote"])

  ## HorseServings
  subscribeHorseServingsByHorseId(horseId: ID!): HorseServing
  @aws_subscribe(mutations: ["createHorseServing", "updateHorseServing"])
}

## Horse
type HorseSummary {
  horseId: ID!
  horseRole: HorseRole!
  horseShareSummary: HorseShareSummary
  horseProfileSummary: HorseProfileSummary
}

input GetHorseSummariesInput {
  horseShareId: ID
}

enum GetHorseSummariesError {
  SERVICE
}

input CreateHorseInput {
  horseDisplayName: String!
  horseAvatarId: ID!
  horseBoard: CreateBarnBoardInput
}

enum HorseRole {
  OWNER
  SHAREHOLDER
  LESSEE
  CAREGIVER
  RIDER
}

## HorseProfile
type HorseProfile {
  horseId: ID!
  horseDisplayName: String!
  horsePrimaryOwner: UserProfilePublic!
  horseStatus: HorseStatus!
  horseCreatedOn: AWSDateTime!
  horseCreatedBy: UserProfilePublic!
  horseAvatarId: ID!
  horseModifiedOn: AWSDateTime
  horseModifiedBy: UserProfilePublic
  horseDeactivatedOn: AWSDateTime
  horseDeactivatedBy: UserProfilePublic
  horseDeceasedOn: AWSDateTime
  horseCategory: HorseCategory
  horseBred: HorseBred
  horseSireBreed: BreedProfileSummary
  horseDamnBreed: BreedProfileSummary
  horseSire: HorseProfilePublic
  horseSiringStatus: HorseSiringStatus
  horseDamn: HorseProfilePublic
  horseDammingStatus: HorseDammingStatus
  horseGender: HorseGender
  horseBuild: HorseBuild
  horseClassification: HorseClassification
  HorseType: HorseType
  horseRegisteredName: String
  horseHeight: HorseHeight
  horseWeight: Float
  horseBirthday: AWSDateTime
  horseGotchaDay: AWSDateTime
}

type HorseProfileSummary {
  horseId: ID!
  horseAvatarId: ID!
  horseDisplayName: String
  horsePrimaryOwner: UserProfilePublic
  horseBirthday: AWSDateTime
  horseGender: HorseGender
  horseSireBreed: BreedProfileSummary
  horseDamnBreed: BreedProfileSummary
}

type HorseProfilePublic {
  horseId: ID!
  horseAvatarId: ID!
  horseDisplayName: String
  horseBirthday: AWSDateTime
  horseGender: HorseGender
  horseSireBreed: BreedProfileSummary
  horseDamnBreed: BreedProfileSummary
}

input GetHorseProfileInput {
  horseId: ID!
  horseShareId: ID
}

enum GetHorseProfileError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

input UpdateHorseProfileInput {
  horseDisplayName: String!
}

enum UpdateHorseProfileError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

enum HorseSiringStatus {
  REQUESTED
  DENIED
  CONFIRMED
}

enum HorseDammingStatus {
  REQUESTED
  DENIED
  CONFIRMED
}

enum HorseStatus {
  NORMAL
  REST
  QUARANTINE
}

enum HorseCategory {
  HORSE
  MINIATURE
  PONY
}

enum HorseBred {
  PURE
  CROSS
  MIXED
}

enum HorseGender {
  STALLION
  MARE
  GELDING
  COLT
  FILLY
  RIDGLING
}

enum HorseBuild {
  COB
  BAROQUE
  HEAVY
  MEDIUM
  LIGHT
}

enum HorseClassification {
  PLEASURE
  GAITED
  SHOW
  SPORT
  RACE
  STOCK
  ENDURANCE
  DRIVING
  WORK
  PET
  FERAL
}

enum HorseType {
  WARM_BLOOD
  HOT_BLOOD
  COLD_BLOOD
  FERAL
}

enum HorseHeight {
  HANDS_10_0
  HANDS_10_1
  HANDS_10_2
  HANDS_10_3
  HANDS_11_0
  HANDS_11_1
  HANDS_11_2
  HANDS_11_3
  HANDS_12_0
  HANDS_12_1
  HANDS_12_2
  HANDS_12_3
  HANDS_13_0
  HANDS_13_1
  HANDS_13_2
  HANDS_13_3
  HANDS_14_0
  HANDS_14_1
  HANDS_14_2
  HANDS_14_3
  HANDS_15_0
  HANDS_15_1
  HANDS_15_2
  HANDS_15_3
  HANDS_16_0
  HANDS_16_1
  HANDS_16_2
  HANDS_16_3
  HANDS_17_0
  HANDS_17_1
  HANDS_17_2
  HANDS_17_3
  HANDS_18_0
  HANDS_18_1
  HANDS_18_2
  HANDS_18_3
  HANDS_19_0
  HANDS_19_1
  HANDS_19_2
  HANDS_19_3
  HANDS_20_0
  HANDS_20_1
  HANDS_20_2
  HANDS_20_3
}


union HorseShareProfile = UserProfilePublic | ProProfilePublic


## HorseShare
type HorseShare {
  horseId: ID!
  horseShareId: ID!
  horseShareType: HorseShareType!
  horseShareStatus: HorseShareStatus!
  horseShareProfile: HorseShareProfile!
  horseShareInvitedBy: UserProfilePublic!
  horseShareInvitedOn: AWSDateTime!
  horseShareAcceptedOn: AWSDateTime
  horseShareDeclinedOn: AWSDateTime
  horseShareSuspendedBy: UserProfilePublic
  horseShareSuspendedOn: AWSDateTime
  horseShareDeactivatedOn: AWSDateTime
  horseShareDeactivatedBy: UserProfilePublic
  horseShareAutoDeactivateOn: AWSDateTime
  horseShareAutoDeactivateSetBy: UserProfilePublic
  horseShareComment: String
}


type HorseShareSummary {
  horseId: ID!
  horseShareId: ID!
  horseShareType: HorseShareType!
  horseShareStatus: HorseShareStatus!
  horseShareUserProfileSummary: UserProfilePublic
  horseShareProProfileSummary: ProProfilePublic
  horseShareInvitedBy: UserProfilePublic!
  horseShareInvitedOn: AWSDateTime!
  horseShareAcceptedOn: AWSDateTime
  horseShareDeclinedOn: AWSDateTime
  horseShareSuspendedBy: UserProfilePublic
  horseShareSuspendedOn: AWSDateTime
  horseShareDeactivatedOn: AWSDateTime
  horseShareDeactivatedBy: UserProfilePublic
}

input GetHorseShareSummariesInput {
  horseId: ID!
}

enum GetHorseShareSummariesError {
  NOT_AUTHORIZED
  SERVICE
}

input GetHorseShareInput {
  horseId: ID!
  horseShareId: ID!
}

enum GetHorseShareError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

input CreateHorseShareInput {
  horseId: ID!
  horseShareId: ID!
  horseShareType: HorseShareType!
  horseShareStatus: HorseShareStatus!
}

enum CreateHorseShareError {
  NOT_AUTHORIZED
  NONEXISTENT_HORSE_ID
  NONEXISTENT_HORSE_SHARE_ID
  SERVICE
}

input AcceptHorseShareQrCodeInput {
  qrCode: ID!
}

input UpdateHorseShareInput {
  horseId: ID!
  horseShareId: ID!
  horseShareStatus: HorseShareStatus!
}

enum UpdateHorseShareError {
  NOT_FOUND
  NOT_AUTHORIZED
  SERVICE
}

input AcceptHorseShareCodeInput {
  horseCode: ID!
}

enum HorseShareType {
  CO_OWNER
  LESSEE
  PRO
  RIDER
}

enum HorseShareStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  INVITED
  DECLINED
}


## HorseActivity
type HorseActivities {
  lastKey: String
  activities: [HorseActivity]!
}

type HorseActivity {
  horseId: ID!
  horseActivityId: ID!
  horseActivityUserAssignment: UserProfilePublic
  horseActivityBarnAssignment: BarnProfilePublic
  horseActivityType: HorseActivityType!
  horseActivityCreatedById: ID!
  horseActivityCreatedByName: String
  horseActivityCreatedByLabel: String
  horseActivityCreatedOn: AWSDateTime!
  horseActivityDueOn: AWSDateTime
  horseActivityPeriod: MsServicePeriod
  horseActivityAssignedToName: String
  horseActivityAssignedToLabel: String
  horseActivityAssignedToAvatarId: ID
  horseActivityCompletedOn: AWSDateTime
  horseActivityCompletedById: ID
  horseActivityCompletedByName: String
  horseActivityCompletedByLabel: String
  horseActivityCompletedByAvatarId: ID
  horseActivityCreateComment: String
  horseActivityCompleteComment: String
}

input GetHorseActivitiesInput {
  horseId: ID!
  horseShareId: ID
  startKey: String
}

enum GetHorseActivitiesError {
  NOT_AUTHORIZED
  NONEXISTENT_HORSE_ID
  INVALID_START_KEY
  SERVICE
}

input CreateHorseActivityInput {
  horseId: ID!
  horseBarnId: ID
  horseActivityType: HorseActivityType!
  horseActivityAssignedTo: ID
  horseActivityCompleteBy: AWSDateTime
  horseActivityCreateComment: String
}

enum CreateHorseActivityError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

input UpdateHorseActivityInput {
  horseId: ID!
  barnId: ID
  horseActivityCompleteComment: String
}

enum UpdateHorseActivityError {
  NOT_AUTHORIZED
  NOT_FOUND
  SERVICE
}

enum HorseActivityType {
  FEED
  MEDICATION
  CLEAN_STALL
  TURNOUT
  BLANKET
  RIDE
  HAND_WALK
}

## HorseNote
type HorseNotes {
  lastKey: String
  notes: [HorseNote]!
}

type HorseNote {
  horseId: ID!
  horseNoteId: ID!
  horseNoteCreatedOn: AWSDateTime!
  horseNoteCreatedBy: UserProfilePublic!
  horseNoteTitle: String
  horseNoteBody: String!
  horseNoteIsPined: Boolean
}

input GetHorseNotesInput {
  horseId: ID!
  horseShareId: ID
  startKey: String
}

enum GetHorseNotesError {
  NOT_AUTHORIZED
  NONEXISTENT_HORSE_ID
  INVALID_START_KEY
  SERVICE
}

input CreateHorseNoteInput {
  horseNoteTitle: String
  horseNoteBody: String!
  horseNoteIsPined: Boolean
}

enum CreateHorseNoteError {
  NOT_AUTHORIZED
  SERVICE
}

input UpdateHorseNoteInput {
  horseNoteId: ID!
  associatedId: ID!
  horseNoteIsPined: Boolean
}

input DeleteHorseNoteInput {
  horseNoteId: ID!
}

enum DeleteHorseNoteError {
  NOT_AUTHORIZED
  SERVICE
}

## HorseServing
type HorseServing {
  horseId: ID!
  horseServingId: ID!
  HorseServingPeriod: MsServicePeriod!
  horseServingProductSummary: ProductSummary!
  horseServingQuantity: Int!
  horseServingUnit: HorseServingUnit!
  horseServingFrequency: HorseServingFrequency!
}

input GetHorseServingsInput {
  horseId: ID!
  associatedId: ID!
}

input CreateHorseServingInput {
  horseId: ID!
  horseServingProductId: ID!
  horseServingQuantity: Int!
  horseServingUnit: HorseServingUnit!
  horseServingFrequency: HorseServingFrequency
  horseServingDays: HorseServingDays
}

input UpdateHorseServingInput {
  horseId: ID!
  horseServingId: ID!
  horseServingQuantity: Int
  horseServingUnit: HorseServingUnit
  horseServingFrequency: HorseServingFrequency
}

enum HorseServingUnit {
  POUND
  KILOGRAM
  OUNCE
  CUP
  HANDFUL
  FLAKE
  BALE
  SCOOP
  TABLESPOON
  TEASPOON
  MILLILITER
  LITER
  BLOCK
  BAG
  IU
}

enum HorseServingFrequency {
  DAILY
  SPECIFIC_DAYS
  BIWEEKLY
  BIMONTHLY
  MONTHLY
  QUARTERLY
  BIANNUALLY
  ANNUALLY
}

enum HorseServingDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
