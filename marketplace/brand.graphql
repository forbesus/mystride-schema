type Query {
  getBrands(input: GetBrandsInput): BrandsResult!
  getBrand(input: GetBrandInput): BrandResult!
}

type Brand {
  brandId: ID!
  brandStatus: BrandStatus!
  brandOrgId: ID!
  brandName: String!
  brandProductCategories: [BrandProductCategory]!
  brandRegions: [MsCountryCode]!
  brandEstablished: Int
  brandUrl: String
  brandFacebookId: String
  brandInstagramId: String
  brandXId: String
  brandSnapchatId: String
  brandTikTokId: String
  brandYouTubeId: String
  brandBio: String
}

type BrandSummary {
  brandId: ID!
  brandStatus: BrandStatus!
  brandOrgId: ID!
  brandName: String!
}

input GetBrandsInput {
  actingId: ID!
  brandOrgId: ID
  brandProductCategories: [BrandProductCategory!]
  brandProductMarkets: [MsCountryCode!]
  resultLocalization: MsLanguageCode
  startKey: String
}

type BrandsResult {
  result: MsResult!
  brandSummaries: [BrandSummary]
  lastKey: String
  error: BrandError
}

input GetBrandInput {
  actingId: ID!
  brandId: ID!
  resultLocalization: MsLanguageCode
}

type BrandResult {
  result: MsResult!
  brand: Brand
  error: BrandError
}

enum BrandProductCategory {
 NUTRITION
 PHARMACEUTICAL
}

enum BrandError {
 NOT_AUTHORIZED
 NONEXISTENT_ACTING_ID
 INVALID_ACTING_ID
 INACTIVE_ACTING_ID
 NONEXISTENT_BRAND_ID
 INVALID_BRAND_ID
}

enum BrandStatus {
 ACTIVE
 INACTIVE
}