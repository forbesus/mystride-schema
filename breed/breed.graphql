type Query {
  getBreed(input: GetBreedInput): BreedResult! ## Contains Breed w/ SUCCESS
}

type Breed {
  breedId: ID!
  breedProfile: BreedProfile!
  breedOrganizations: [Org]
}

type BreedProfile {
  breedId: ID!
  breedCommonNameEnglish: String!
  breedOfficialNameEn: String
  breedAlternateNameEn: String
  breedHistoricalNameEn: String
  breedCommonNameLocalized: String
  breedCommonNameLocalizedLanguage: String
  breedCategory: String
  breedBuild: String
  breedType: String
  breedOriginCountryCode: String
  breedOriginCountry: String
  breedRegions: [String]
  breedOrgs: [ID]
  breedRelatives: [BreedProfileSummary]
  breedLifeAvg: Float
  breedLifeLow: Float
  breedLifeHigh: Float
  breedHeightAvg: Float
  breedHeightLow: Float
  breedHeightHigh: Float
  breedWeightAvg: Float
  breedWeightLow: Float
  breedWeightHigh: Float
  breedPrimaryUse: String
}

input GetBreedInput {
  actingId: ID!
  breedId: ID!
}

type BreedResult {
  result: MsResult!
  breed: Breed
  error: BreedError
}

enum BreedError {
  NOT_AUTHORIZED
  NONEXISTENT_ACTING_ID
  INVALID_ACTING_ID
  INACTIVE_ACTING_ID
  NONEXISTENT_BREED_ID
  INVALID_BREED_ID
  SERVICE
}

enum BreedConservationStatus {
  EXTINCT
  CRITICAL
  ENDANGERED
  VULNERABLE
  NEAR
  LEAST
  UNKNOWN
}